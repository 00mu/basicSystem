(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{298:function(t,_,i){"use strict";i.r(_);var e=i(29),v=Object(e.a)({},(function(){var t=this,_=t.$createElement,i=t._self._c||_;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("p",[t._v("混 Github 同性社区 git 是必备的。公司代码协作也从 SVN 迁移到 git ，趁机把日常用到的一些简单命令做个梳理，以备脑短路时查阅。本文会持续更正更新...")]),t._v(" "),i("h2",{attrs:{id:"_1-git-起步"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_1-git-起步"}},[t._v("#")]),t._v(" 1. Git 起步")]),t._v(" "),i("h3",{attrs:{id:"_1-1-仓库的概念"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-仓库的概念"}},[t._v("#")]),t._v(" 1.1. 仓库的概念")]),t._v(" "),i("p",[t._v("Git 由 工作区（workspace）、暂存区（index）、本地仓库（local repository），远程仓库（remote repository）组成")]),t._v(" "),i("h4",{attrs:{id:"_1-1-1-解释说明"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-解释说明"}},[t._v("#")]),t._v(" 1.1.1 解释说明")]),t._v(" "),i("ul",[i("li",[t._v("远程仓库： 远程仓库是指托管在网络上的项目仓库，它们是一些无法移动的本地分支；只有在 Git 进行网络交互时才会更新。同他人协作开发某个项目时，需要管理这些远程仓库，以便推送或拉取数据，分享各自的工作进展。")]),t._v(" "),i("li",[t._v("远程分支： 远程引用是对远程仓库的引用（指针），包括分支、标签等等，只有在 Git 进行网络交互时才会更新。我理解的是 "),i("em",[t._v("远程分支")]),t._v(" 存放在 "),i("em",[t._v("本地仓库")])])]),t._v(" "),i("h4",{attrs:{id:"_1-1-2-文件的三种状态"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-文件的三种状态"}},[t._v("#")]),t._v(" 1.1.2 文件的三种状态")]),t._v(" "),i("p",[t._v("对于任何一个文件，在 Git 内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）。")]),t._v(" "),i("ul",[i("li",[t._v("已提交表示该文件已经被安全地保存在本地数据库中了；")]),t._v(" "),i("li",[t._v("已修改表示修改了某个文件，但还没有提交保存；")]),t._v(" "),i("li",[t._v("已暂存表示把已修改的文件放在下次提交时要保存的清单中。")])]),t._v(" "),i("h4",{attrs:{id:"_1-1-3-基本的-git-工作流程"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-3-基本的-git-工作流程"}},[t._v("#")]),t._v(" 1.1.3 基本的 Git 工作流程")]),t._v(" "),i("ol",[i("li",[t._v("在工作目录中修改某些文件。")]),t._v(" "),i("li",[t._v("对修改后的文件进行快照，然后保存到暂存区域。")]),t._v(" "),i("li",[t._v("提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中。近乎所有操作都是本地执行，也是 "),i("em",[t._v("分布式工作流程")]),t._v(" 的魅力所在")]),t._v(" "),i("li",[t._v("功能开发完毕推送到远程仓库，便可协同开发了")])]),t._v(" "),i("h3",{attrs:{id:"_1-2-安装-git-bash"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-安装-git-bash"}},[t._v("#")]),t._v(" 1.2. 安装 Git Bash")]),t._v(" "),i("ul",[i("li",[t._v("windows平台下载安装 ["),i("a",{attrs:{href:"https://git-for-windows.github.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://git-for-windows.github.io/"),i("OutboundLink")],1),t._v("]")]),t._v(" "),i("li",[i("code",[t._v("git --help git")]),t._v(" git帮助文档")])]),t._v(" "),i("h3",{attrs:{id:"_1-3-运行-git-前的配置"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-运行-git-前的配置"}},[t._v("#")]),t._v(" 1.3. 运行 Git 前的配置")]),t._v(" "),i("ul",[i("li",[i("p",[t._v("设置全局Name和Email地址")]),t._v(" "),i("blockquote",[i("p",[t._v('git config --global user.name "Your Name" git config --global user.email "email@example.com"')])])]),t._v(" "),i("li",[i("p",[t._v("也可以给指定项目单独设置信息")]),t._v(" "),i("blockquote",[i("p",[t._v('git config user.name "Your Name" git config user.email "email@example.com" git config --list 查看配置信息')])])]),t._v(" "),i("li",[i("p",[t._v("文本编辑器，Git 需要你输入一些额外消息的时候，默认 Vi 或者 Vim")]),t._v(" "),i("blockquote",[i("p",[t._v("git config --global core.editor atom")])])]),t._v(" "),i("li",[i("p",[t._v("查看配置信息")]),t._v(" "),i("blockquote",[i("p",[t._v("git config --list")])])])]),t._v(" "),i("h2",{attrs:{id:"_2-git-基础"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-git-基础"}},[t._v("#")]),t._v(" 2. Git 基础")]),t._v(" "),i("h3",{attrs:{id:"_2-2-git-基础操作"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-git-基础操作"}},[t._v("#")]),t._v(" 2.2. Git 基础操作")]),t._v(" "),i("h4",{attrs:{id:"_2-2-1-取得项目的-git-仓库"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-取得项目的-git-仓库"}},[t._v("#")]),t._v(" 2.2.1. 取得项目的 Git 仓库")]),t._v(" "),i("h5",{attrs:{id:"进入工作目录"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#进入工作目录"}},[t._v("#")]),t._v(" 进入工作目录")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("mkdir HtmlCode")]),t._v(" 创建工作区")]),t._v(" "),i("li",[i("code",[t._v("cd HtmlCode")]),t._v(" 进入文件夹")]),t._v(" "),i("li",[i("code",[t._v("pwd")]),t._v(" 显示当前目录")])]),t._v(" "),i("h5",{attrs:{id:"在此目录初始化仓库-或-从现有仓库克隆一份"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#在此目录初始化仓库-或-从现有仓库克隆一份"}},[t._v("#")]),t._v(" 在此目录初始化仓库 或 从现有仓库克隆一份")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("git init")]),t._v(" 在工作区创建git管理仓库 or "),i("em",[t._v("clone一个远程库")])]),t._v(" "),i("li",[i("code",[t._v("git clone [url] D://HtmlCode")]),t._v(" 克隆远程版本库并更名")])]),t._v(" "),i("h4",{attrs:{id:"_2-2-2-记录每次更新到仓库"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-记录每次更新到仓库"}},[t._v("#")]),t._v(" 2.2.2.  记录每次更新到仓库")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("git status")]),t._v(" 检查当前仓库文件状态")]),t._v(" "),i("li",[i("code",[t._v("git add .")]),t._v(" 指明要追踪文件，把目标文件放入暂存区域")]),t._v(" "),i("li",[i("code",[t._v('git commit -m "说明话术"')]),t._v(" 现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库")]),t._v(" "),i("li",[i("code",[t._v("git push")]),t._v(" 推送到远程仓库")])]),t._v(" "),i("h4",{attrs:{id:"_2-2-3-查看提交历史"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-查看提交历史"}},[t._v("#")]),t._v(" 2.2.3. 查看提交历史")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("git log")]),t._v(" 默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面。看到了吗，每次更新都有一个 SHA-1 校验和、作者的名字和电子邮件地址、提交时间，最后缩进一个段落显示提交说明。")]),t._v(" "),i("li",[i("code",[t._v("git log -p -2")]),t._v(" 我们常用 -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新")]),t._v(" "),i("li",[i("code",[t._v("git log --oneline")]),t._v(" 精简模式")]),t._v(" "),i("li",[i("code",[t._v("git reflog")]),t._v(" 查看命令历史，以便回到未来的版本")])]),t._v(" "),i("h3",{attrs:{id:"_2-3-撤消操作"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-撤消操作"}},[t._v("#")]),t._v(" 2.3. 撤消操作")]),t._v(" "),i("h4",{attrs:{id:"_2-3-1-修改最后一次提交"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-修改最后一次提交"}},[t._v("#")]),t._v(" 2.3.1. 修改最后一次提交")]),t._v(" "),i("p",[t._v("有时候我们提交完了才发现漏掉了几个文件没有加，或者提交信息写错了。想要撤消刚才的提交操作，可以使用--amend 选项重新提交：")]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("git commit -m 'initial commit'\ngit add forgotten_file\ngit commit --amend\n")])])]),i("p",[t._v("上面的三条命令最终只是产生一个提交，第二个提交命令修正了第一个的提交内容。")]),t._v(" "),i("h4",{attrs:{id:"_2-3-2-取消已经暂存的文件"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-取消已经暂存的文件"}},[t._v("#")]),t._v(" 2.3.2. 取消已经暂存的文件")]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("git reset HEAD <files>\n")])])]),i("h3",{attrs:{id:"_2-4-回退文件"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-回退文件"}},[t._v("#")]),t._v(" 2.4. 回退文件")]),t._v(" "),i("p",[i("img",{attrs:{src:"/article_images/D1_git-stage.png",alt:"工作区、版本库、暂存区原理图"}})]),t._v(" "),i("ul",[i("li",[i("p",[i("code",[t._v("git checkout -- <file1> <file2>")]),t._v(" 此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动,已添加到缓存区的改动，以及新文件，都不受影响")])]),t._v(" "),i("li",[i("p",[i("code",[t._v("git checkout -f")]),t._v(" 丢弃工作区、缓存区所有修改。清除commit之前的所有修改")])]),t._v(" "),i("li",[i("p",[i("code",[t._v("git checkout <commitID>")]),t._v(" 干净的版本回退，将丢弃工作区、缓存区所有修改")])]),t._v(" "),i("li",[i("p",[i("code",[t._v("git checkout HEAD <file>")]),t._v(" 从最新的版本替换工作区文件")])]),t._v(" "),i("li",[i("p",[i("code",[t._v("git reset --soft HEAD^")]),t._v(" 从最新版本库回退到工作区")])]),t._v(" "),i("li",[i("p",[i("code",[t._v("git reset --soft <commitID>")]),t._v(" 从最新版本库回退到工作区")]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("--soft – 缓存区和工作目录都不会被改变\n--mixed – 默认选项。缓存区和你指定的提交同步，但工作目录不受影响\n--hard – 缓存区和工作目录都同步到你指定的提交\n")])])])]),t._v(" "),i("li",[i("p",[i("code",[t._v("git reset <commit_id>")]),t._v(" 在历史版本间回滚，消除commit信息，文件放回工作区")])]),t._v(" "),i("li",[i("p",[i("code",[t._v("git rm --cached <file1> <file2>")]),t._v(" 直接从暂存区删除文件，工作区则不做出改变")])])]),t._v(" "),i("h3",{attrs:{id:"_2-5-清理untracked文件"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-清理untracked文件"}},[t._v("#")]),t._v(" 2.5.  清理untracked文件")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("git clean -f")]),t._v(" 删除所有 untracked 文件")]),t._v(" "),i("li",[i("code",[t._v("git clean -fd")]),t._v(" 连同 untracked 目录一并删除 "),i("em",[t._v("建议删除前加上 -n 预览会删除哪些文件，以免误删")]),t._v(" "),i("code",[t._v("git clear -nfd")])])]),t._v(" "),i("h2",{attrs:{id:"_3-git-分支"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_3-git-分支"}},[t._v("#")]),t._v(" 3. Git 分支")]),t._v(" "),i("h3",{attrs:{id:"_3-1-分支管理"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-分支管理"}},[t._v("#")]),t._v(" 3.1 分支管理")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("git fetch –p")]),t._v(" 更新分支列表")]),t._v(" "),i("li",[i("code",[t._v("git branch")]),t._v(" 查看当前分支，当前分支前面会标一个「*」")]),t._v(" "),i("li",[i("code",[t._v("git branch -r")]),t._v(" 查看远程分支")]),t._v(" "),i("li",[i("code",[t._v("git branch -a")]),t._v(" 查看所有分支")]),t._v(" "),i("li",[i("code",[t._v("git branch -va")]),t._v(" 查看所有分支+log")]),t._v(" "),i("li",[i("code",[t._v("git branch -ar")]),t._v(" 查看本地+远程分支及最后一次log")]),t._v(" "),i("li",[i("code",[t._v("git branch <branch>")]),t._v(" 创建分支")]),t._v(" "),i("li",[i("code",[t._v("git checkout <branch>")]),t._v(" 切换分支")]),t._v(" "),i("li",[i("code",[t._v("git checkout -b <branch>")]),t._v(" 创建+切换分支")]),t._v(" "),i("li",[i("code",[t._v("git merge <branch>")]),t._v(" 合并某分支到当前分支")]),t._v(" "),i("li",[i("code",[t._v("git branch -D <branch>")]),t._v(" 删除某分支")])]),t._v(" "),i("h3",{attrs:{id:"_3-2-与远程仓库交互"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-与远程仓库交互"}},[t._v("#")]),t._v(" 3.2. 与远程仓库交互")]),t._v(" "),i("h4",{attrs:{id:"_3-2-1-更新远程分支信息"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-更新远程分支信息"}},[t._v("#")]),t._v(" 3.2.1. 更新远程分支信息")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("git fetch")]),t._v(" 将远程主机的更新全部取回本地，fetch 回来的分支，用 origin/branch_xx 格式访问")]),t._v(" "),i("li",[i("code",[t._v("git fetch origin master")]),t._v(" 取回 origin 主机的 master 分支")])]),t._v(" "),i("h4",{attrs:{id:"_3-2-1-从远程分支开新分支"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-从远程分支开新分支"}},[t._v("#")]),t._v(" 3.2.1. 从远程分支开新分支")]),t._v(" "),i("ol",[i("li",[i("code",[t._v("git fetch origin <remoteBranch>")]),t._v(" 从远程仓库取回指定分支作为远程分支")]),t._v(" "),i("li",[i("code",[t._v("git checkout -b <localBranch> <origin/remoteBranch>")]),t._v(" 在此远程分支上创建一个新分支")])]),t._v(" "),i("h4",{attrs:{id:"_3-2-2-远程主机上的分支-合并到-本地分支"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-远程主机上的分支-合并到-本地分支"}},[t._v("#")]),t._v(" 3.2.2. 远程主机上的分支 合并到 本地分支")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("git pull origin <remoteBranch>")]),t._v(" 将远程仓库指定分支与当前分支合并")]),t._v(" "),i("li",[i("code",[t._v("git pull origin <remoteBranch>:<localBranch>")]),t._v(" 将远程某分支与指定的本地分支合并")]),t._v(" "),i("li",[i("code",[t._v("git merge origin/<remoteBranch>")]),t._v(" 将远程分支merge到本分支")])]),t._v(" "),i("h5",{attrs:{id:"pull-和-merge-的区别"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#pull-和-merge-的区别"}},[t._v("#")]),t._v(" pull 和 merge 的区别")]),t._v(" "),i("ul",[i("li",[t._v("git pull 等同于先做 "),i("code",[t._v("git fetch")]),t._v(",再做 "),i("code",[t._v("git merge")])]),t._v(" "),i("li",[t._v("git fetch是将远程仓库的更新获取到本地仓库，不影响其他区域")]),t._v(" "),i("li",[t._v("git pull则是一次性将远程仓库的代码更新到工作区（同时也会更新本地仓库）。")])]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("git fetch origin <remoteBranch>\ngit merge <origin/remoteBranch>\n")])])]),i("h4",{attrs:{id:"_3-2-3-推送本地分支推送到远程仓库"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-3-推送本地分支推送到远程仓库"}},[t._v("#")]),t._v(" 3.2.3. 推送本地分支推送到远程仓库")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("git push -u origin <branch>")]),t._v(" 将本地分支推送到远程仓库同时指定默认主机，之后不用加任何参数直接使用 "),i("code",[t._v("git push")])]),t._v(" "),i("li",[i("code",[t._v("git push <origin> <localBranch>:<remoteBranch>")]),t._v(" 本地分支推送到远程仓库，如果远程不存在此分支则会被新建")]),t._v(" "),i("li",[i("code",[t._v("git branch --set-upstream-to=origin/<branch>")]),t._v(" 本地当前分支与远程分支建立追踪关系")]),t._v(" "),i("li",[i("code",[t._v("git branch -vv")]),t._v(" 查看追踪关系")]),t._v(" "),i("li",[i("code",[t._v("git push <origin>")]),t._v(" 如果当前分支与远程分支存在追踪关系，则可直接push到主机")]),t._v(" "),i("li",[i("code",[t._v("git push")]),t._v(" 如果当前分支有且只有一个追踪分支，那么主机名亦可省略")])]),t._v(" "),i("h5",{attrs:{id:"删除本地及远程分支"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#删除本地及远程分支"}},[t._v("#")]),t._v(" 删除本地及远程分支")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("git branch -D <branch1> <branch2>")]),t._v(" 同时删除本地若干分支")]),t._v(" "),i("li",[i("code",[t._v("git push origin :<remoteBranch>")]),t._v(" 推送时省略本地分支则会删除指定的远程的分支，同事从远程仓库指针。 *注意不要省略"),i("code",[t._v(":")]),t._v("前的空格")])]),t._v(" "),i("h2",{attrs:{id:"_4-git-workflow"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_4-git-workflow"}},[t._v("#")]),t._v(" 4. Git WorkFlow")]),t._v(" "),i("h3",{attrs:{id:"_4-1-一次完整的-bugfix-流程"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-一次完整的-bugfix-流程"}},[t._v("#")]),t._v(" 4.1. 一次完整的 bugFix 流程")]),t._v(" "),i("ol",[i("li",[i("code",[t._v("git fetch orign master")]),t._v(" 从远程仓库指定一个分支拉取到本地远程分支")]),t._v(" "),i("li",[i("code",[t._v("git checkout -b <bug_xxx> origin/master")]),t._v(" 从远程master分支创建 bug_xxx 分支")]),t._v(" "),i("li",[t._v("本地分支开发代码")]),t._v(" "),i("li",[i("code",[t._v("git add .")]),t._v(" "),i("code",[t._v('git commit -m "话术"')]),t._v(" commit 本次更改")]),t._v(" "),i("li",[i("code",[t._v("git push -u origin <branch_feature>")]),t._v(" 推送本分支到远程作为一个远程新分支")]),t._v(" "),i("li",[t._v("发起「pull request」,将 <bug_xxx> 合并到 master")]),t._v(" "),i("li",[t._v("PR 被管理员接受即完成本次流程，已废弃分支建议及时删除")])]),t._v(" "),i("h2",{attrs:{id:"_5-git-tips"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_5-git-tips"}},[t._v("#")]),t._v(" 5. Git tips")]),t._v(" "),i("h3",{attrs:{id:"_5-1-解决-pullrequest-冲突"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-解决-pullrequest-冲突"}},[t._v("#")]),t._v(" 5.1. 解决 pullRequest 冲突")]),t._v(" "),i("p",[t._v("eg. vNext_promotion 合并到 vNext 时冲突")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("git pull")]),t._v("拉取最新代码到本地，工作区不能有 modified 文件；若有，先 "),i("code",[t._v("git stash")]),t._v(" 代码，再 "),i("code",[t._v("git pull")]),t._v(",再将 "),i("code",[t._v("stash")]),t._v(" 的代码 "),i("code",[t._v("git stash pop")]),t._v(" 恢复到工作区")]),t._v(" "),i("li",[i("code",[t._v("git fetch origin vNext")]),t._v(" & "),i("code",[t._v("git merge origin/vNext")]),t._v(" 手动合并代码，发现并解决冲突后再推送代码")]),t._v(" "),i("li",[i("code",[t._v("git push")]),t._v(" 发起PR")])]),t._v(" "),i("p",[t._v("建议优先参考 "),i("a",{attrs:{href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitBook"),i("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=v.exports}}]);